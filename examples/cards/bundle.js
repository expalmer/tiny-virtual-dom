(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = {
	ADD_CARD: 'ADD_CARD',
	ADD_TASK: 'ADD_TASK',
	TASK_TOGGLE: 'TASK_TOGGLE',
	REMOVE_TASK: 'REMOVE_TASK',
	COUNTING: 'COUNTING',
	STOP: 'STOP',
	PLAY: 'PLAY',
	REMOVE: 'REMOVE'
};

},{}],2:[function(require,module,exports){
/** @jsx h */
const { h, patch } = require('../../lib');
const store = require('./store');
const constants = require('./constants');
var currentTree;
var counters = {};

// EVENTS
function onSubmit(e) {
  e.preventDefault();
  const title = e.target.childNodes[0].value;
  const seconds = e.target.childNodes[1].value;
  if (title && seconds) {
    e.target.childNodes[0].focus();
    e.target.childNodes[0].value = '';
    e.target.childNodes[1].value = '';
    store.dispatch(constants.ADD_CARD, { title, seconds });
  }
  return false;
}

function onAddTask(e, id) {
  const { value } = e.target;
  if (e.keyCode === 13 && value) {
    store.dispatch(constants.ADD_TASK, { id, value });
    e.target.value = '';
  }
}

function onTaskToggle(id, idx) {
  store.dispatch(constants.TASK_TOGGLE, { id, idx });
}

function onRemoveTask(id, idx) {
  store.dispatch(constants.REMOVE_TASK, { id, idx });
}

function onStop(e, id) {
  e.stopPropagation();
  store.dispatch(constants.STOP, { id });
}

function onStart(e, id) {
  e.stopPropagation();
  store.dispatch(constants.PLAY, { id });
}

function onRemove(e, id) {
  e.stopPropagation();
  clearTimes(id);
  store.dispatch(constants.REMOVE, { id });
}

function clearTimes(id) {
  if (!counters[id]) {
    return;
  }
  counters[id].map(c => clearInterval(c));
  counters[id] = [];
}
function times(id, seconds, stop) {
  if (!counters[id] || counters[id].length === 0) {
    const fn = function (s, i) {
      return () => store.dispatch(constants.COUNTING, { id: i, seconds: s-- });
    }(seconds, id);
    counters[id] = counters[id] || [];
    counters[id].push(setInterval(fn, 1000));
    return;
  }

  if (stop || seconds === 0) {
    clearTimes(id);
    if (seconds === 0) {
      setTimeout(() => store.dispatch(constants.REMOVE, { id }), 1);
    }
  }
}

// ELEMENTS
function Header(props) {
  return h(
    'header',
    { className: 'header' },
    h(
      'form',
      { onsubmit: onSubmit },
      h('input', { type: 'text', placeholder: 'title' }),
      h('input', { type: 'number', placeholder: 'timeout' }),
      h('input', { type: 'submit', style: { display: 'none' } })
    )
  );
}

function Actions(props) {
  const { id } = props;
  return h(
    'div',
    { className: 'card__actions' },
    h(
      'span',
      { className: 'play', onclick: e => onStart(e, id) },
      'Play'
    ),
    h(
      'span',
      { className: 'stop', onclick: e => onStop(e, id) },
      'Stop'
    ),
    h(
      'span',
      { className: 'remove', onclick: e => onRemove(e, id) },
      'Rem'
    )
  );
};

function AddTask(props) {
  const { id } = props;
  return h(
    'div',
    { className: 'card__input' },
    h('input', { type: 'text', onkeyup: e => onAddTask(e, id) })
  );
};

function Tasks(props) {
  const { id, tasks } = props;
  return h(
    'ul',
    { className: 'tasks' },
    tasks.map((item, idx) => h(
      'li',
      { className: item.done ? 'done' : '' },
      h(
        'span',
        { onclick: () => onTaskToggle(id, idx) },
        item.task
      ),
      h(
        'small',
        { onclick: () => onRemoveTask(id, idx), className: 'del' },
        '\xD7'
      )
    ))
  );
};

function Time(props) {
  const { seconds } = props.card;
  return h(
    'div',
    { className: 'timeout' },
    h(
      'h5',
      null,
      seconds,
      ' ',
      h(
        'small',
        null,
        'sec'
      )
    )
  );
};

function Progress(props) {
  const { tasks } = props;
  const total = tasks.length;
  const done = tasks.filter(t => t.done).length || 0;
  const left = 100 / total * done;
  const className = left < 30 ? 'low' : left < 50 ? 'half' : left < 100 ? 'high' : left === 100 ? 'ok' : '';
  return h(
    'div',
    { className: `progress ${className}` },
    h('span', { style: { left: `${left}%` } })
  );
};

function Card(props) {
  const { card } = props;
  const { id, title, seconds, tasks, stop } = card;
  times(id, seconds, stop || seconds === 0);
  return h(
    'li',
    null,
    h(
      'div',
      { className: 'card' },
      h(
        'h1',
        null,
        title
      ),
      h(AddTask, { id: id }),
      h(Tasks, { tasks: tasks, id: id }),
      h(Progress, { tasks: tasks }),
      h(Time, { card: card }),
      h(Actions, { id: id })
    )
  );
}

function Cards(props) {
  return h(
    'div',
    { className: 'limiter' },
    h(
      'ul',
      { className: 'cards' },
      props.datas.map(card => h(Card, { card: card }))
    )
  );
}
function App(props) {
  const { datas } = props;
  return h(
    'div',
    null,
    h(Header, null),
    h(Cards, { datas: datas })
  );
}

function render(datas) {
  const nextTree = h(App, { datas: datas });
  patch(document.getElementById('app'), nextTree, currentTree);
  currentTree = nextTree;
}
store.subscribe(render);
store.dispatch('INI');

},{"../../lib":5,"./constants":1,"./store":3}],3:[function(require,module,exports){
const constants = require('./constants');

const getId = (() => {
	var id = 1;
	return () => id++;
})();

const initialState = [{
	id: getId(),
	title: 'Some thing to do',
	tasks: [{ task: 'one', done: false }, { task: 'two', done: false }],
	seconds: 60,
	stop: false
}];

const store = (initialState => {
	var listeners = [];
	var currentState = initialState;

	function subscribe(fn) {
		listeners.push(fn);
	}

	function dispatch(action, payload) {
		console.log(action, payload);
		switch (action) {
			case constants.ADD_CARD:
				{
					const { title, seconds } = payload;
					const newCard = {
						id: getId(),
						title,
						seconds,
						tasks: [],
						stop: false
					};
					currentState = [newCard, ...currentState];
					break;
				}
			case constants.ADD_TASK:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.tasks = [{ task: payload.value, done: false }, ...card.tasks];
						}
						return card;
					});
					break;
				}
			case constants.TASK_TOGGLE:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.tasks = [...card.tasks].map((task, idx) => {
								if (payload.idx === idx) {
									task.done = !task.done;
								}
								return task;
							});
						}
						return card;
					});
					break;
				}
			case constants.REMOVE_TASK:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.tasks = [...card.tasks].filter((task, idx) => idx !== payload.idx);
						}
						return card;
					});
					break;
				}

			case constants.COUNTING:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.seconds = payload.seconds;
						}
						return card;
					});
					break;
				}

			case constants.STOP:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.stop = true;
						}
						return card;
					});
					break;
				}

			case constants.PLAY:
				{
					currentState = [...currentState].map(card => {
						if (payload.id === card.id) {
							card.stop = false;
						}
						return card;
					});
					break;
				}
			case constants.REMOVE:
				{
					currentState = [...currentState].filter(card => payload.id !== card.id);
					break;
				}
		}

		listeners.forEach(fn => fn(getState()));
	}

	function getState() {
		return [...currentState];
	}

	return {
		subscribe,
		dispatch,
		getState
	};
})(initialState);

module.exports = store;

},{"./constants":1}],4:[function(require,module,exports){
function isObject(x) {
  return typeof x === "object" && x !== null;
}

function isFunction(x) {
  return typeof x === "function";
}

function isString(x) {
  return typeof x === "string";
}

function isUndefined(x) {
  return x === undefined;
}

const isArray = Array.isArray || function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

function head(x) {
  return isString(x) ? x.charAt(0) : x[0];
}

function merge(a, b) {
  return Object.assign({}, a, b);
}

module.exports = {
  isObject,
  isFunction,
  isArray,
  isString,
  isUndefined,
  head,
  merge
};

},{}],5:[function(require,module,exports){
const {
  isArray,
  isObject,
  isFunction,
  isUndefined,
  head,
  merge
} = require('./helpers');

function h(type, props, ...children) {
  if (isFunction(type)) {
    return type(props);
  }
  if (isArray(head(children))) {
    children = head(children);
  }
  return { type, props: props || {}, children };
}

function createElement(node) {
  if (!isObject(node)) {
    return document.createTextNode(String(node));
  }
  const $el = document.createElement(node.type);
  applyProps($el, node.props);
  node.children.map(child => $el.appendChild(createElement(child)));
  return $el;
}

function patch($parent, newTree, oldTree, index = 0) {
  if (!oldTree) {
    $parent.appendChild(createElement(newTree));
  }if (!newTree) {
    removeChildren($parent, index);
  } else if (changed(newTree, oldTree)) {
    $parent.replaceChild(createElement(newTree), $parent.childNodes[index]);
  } else if (!isUndefined(newTree.type)) {
    applyProps($parent.childNodes[index], newTree.props, oldTree.props);
    patchNodes($parent, newTree, oldTree, index);
  }
}

function changed(a, b) {
  return typeof a !== typeof b || !isObject(a) && a !== b || a.type !== b.type;
}

function patchNodes($parent, newTree, oldTree, index) {
  const len = Math.max(newTree.children.length, oldTree.children.length);
  let i = -1;
  while (++i < len) {
    patch($parent.childNodes[index], newTree.children[i], oldTree.children[i], i);
  }
}

function removeChildren($parent, index) {
  let times = ($parent.childNodes.length || 0) - index;
  while (times-- > 0) {
    if ($parent.lastChild) {
      $parent.removeChild($parent.lastChild);
    }
  }
}

function applyProps($el, newProps, oldProps = {}) {
  const props = merge(newProps, oldProps);
  Object.keys(props).map(name => {
    const newValue = newProps[name];
    const oldValue = oldProps[name];
    if (isObject(newValue)) {
      applyProps($el[name], newValue, oldValue);
    } else {
      if (!newValue) {
        removeProp($el, name);
      } else if (newValue !== oldValue) {
        setProp($el, name, newValue);
      }
    }
  });
}

function setProp($el, name, value) {
  if (name === 'className') {
    $el.setAttribute('class', value);
  } else {
    $el[name] = value;
  }
}

function removeProp($el, name) {
  if (name === 'className') {
    $el.removeAttribute('class');
  } else {
    $el[name] = null;
    delete $el[name];
  }
}

module.exports = {
  h,
  patch
};

},{"./helpers":4}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
